var request = require('request');
// require('request-debug')(request);
var util = require('util');

var TwoCheckout = function () {

  function makeRequest(method, path, params, root, callback) {
    attrs = {
      uri: settings.url + path,
      method: method,
      headers: {
        "Content-Type" : "application/json"
      },
      timeout: 30000,
      auth: {
        user: settings.sellerId,
        pass: settings.privateKey
      }
    };

    if(method === 'GET'){
      attrs.qs = params;
    } else {
      attrs.body = params ? JSON.stringify(params) : null;
    }

    request(attrs, function (error, response, body) {
      var parsedResponse;
      if (error) {
        callback(new Error('Unable to connect to 2Checkout API'));
      } else {
        try {
          parsedResponse = JSON.parse(body);
        } catch (e) {
          callback(new Error('Error parsing JSON response from 2Checkout API.'));
          return;
        }
      }

      if (response.statusCode !== 200) {
        callback(new Error(parsedResponse.error.message));
        return;
      } else {
        result = root === null ? parsedResponse : parsedResponse[root];
        callback(null, result);
      }

    });
  }

  var settings;

  return {
    settings: {
      privateKey: '',
      sellerId: '',
      url: 'https://api.2checkout.com/v2/'
    },

    sales: {
      create: function(params, callback) {
        makeRequest('POST', 'sales', {sale: params}, 'sale', callback);
      },
      find: function(sale_id, callback) {
        makeRequest('GET', util.format('sales/%d', sale_id), null, 'sale', callback);
      },
      list: function(params, callback) {
        makeRequest('GET', 'sales', params, null, callback);
      }
    },
    invoices: {
      find: function(invoice_id, callback) {
        makeRequest('GET', util.format('invoices/%d', invoice_id), null, 'invoice', callback);
      },
      list: function(params, callback) {
        makeRequest('GET', 'invoices', params, null, callback);
      },
      refund: function(invoice_id, params, callback) {

        makeRequest('POST', util.format('invoices/%d/refund', invoice_id), {refund: params}, 'invoice', callback);
      },
      capture: function(invoice_id, callback) {
        makeRequest('POST', util.format('invoices/%d/capture', invoice_id), null, 'invoice', callback);
      }
    },
    customers: {
      create: function(params, callback) {
        makeRequest('POST', 'customers', {customer: params}, 'customer', callback);
      },
      find: function(customer_id, callback) {
        makeRequest('GET', util.format('customers/%s', customer_id), null, 'customer', callback);
      },
      list: function(params, callback) {
        makeRequest('GET', 'customers', params, null, callback);
      },
      update: function(customer_id, params, callback) {
        makeRequest('PUT', util.format('customers/%s', customer_id), {customer: params}, 'customer', callback);
      },
      delete: function(customer_id, callback) {
        makeRequest('DELETE', util.format('customers/%s', customer_id), null, null, callback);
      }
    },
    payment_methods: {
      create: function(customer_id, params, callback) {
        makeRequest('POST', util.format('customers/%s/payment_methods', customer_id), {payment_method: params}, 'payment_method', callback);
      },
      find: function(customer_id, payment_method_id, callback) {
        makeRequest('GET', util.format('customers/%s/payment_methods/%s', customer_id, payment_method_id), null, 'payment_method', callback);
      },
      list: function(customer_id, params, callback) {
        makeRequest('GET', util.format('customers/%s/payment_methods', customer_id), params, null, callback);
      },
      update: function(customer_id, payment_method_id, params, callback) {
        makeRequest('PUT', util.format('customers/%s/payment_methods/%s', customer_id, payment_method_id), {payment_method: params}, 'payment_method', callback);
      },
      delete: function(customer_id, payment_method_id, callback) {
        makeRequest('DELETE', util.format('customers/%s/payment_methods/%s', customer_id, payment_method_id), null, null, callback);
      },
      default: function(customer_id, payment_method_id, callback) {
        makeRequest('POST', util.format('customers/%s/payment_methods/%s/default', customer_id, payment_method_id), null, 'payment_method', callback);
      }
    },
    subscriptions: {
      find: function(subscription_id, callback) {
        makeRequest('GET', util.format('subscriptions/%d', subscription_id), null, 'subscription', callback);
      },
      stop: function(subscription_id, callback) {
        makeRequest('POST', util.format('subscriptions/%d/stop', subscription_id), null, 'subscription', callback);
      }
    },
    config: function(id, key, sandbox) {
      this.settings.sellerId = id;
      this.settings.privateKey = key;
      if (sandbox === true) {
        this.settings.url = 'https://api-sandbox.2checkout.com/v2/';
      }
      settings = this.settings;
    }
  };
};

module.exports = new TwoCheckout();
