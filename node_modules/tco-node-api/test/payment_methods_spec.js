var assert = require('assert'),
  tco = require('./spec_helper');


describe('payment_methods', function(){

  var customer, payment_method;

  beforeEach(function(done){
    tco.customers.create(exampleCustomer, function (error, data) {
      customer = data;
      done();
    });
  });

  afterEach(function(done){
    tco.customers.delete(customer.id, function (error, data) {
      done();
    });
  });

  describe('create()', function(){
    it('should create a payment method for customer', function(done){
      tco.payment_methods.create(customer.id, examplePaymentMethod, function (error, data) {
        assert.ok(data.id);
        assert.ok(data.billing_address);
        assert.ok(data.last4);
        assert.ok(data.brand);
        assert.ok(data.exp_month);
        assert.ok(data.exp_year);
        done();
      });
    });
  });

  describe('list()', function() {
     it('should return a list of payment methods', function(done){
      tco.payment_methods.list(customer.id, null, function (error, data) {
        assert.ok(data.payment_methods[0].id);
        done();
      });
    });
  });

  describe('find()', function() {
    it('should return a payment method for a customer', function(done){
      tco.payment_methods.find(customer.id, customer.payment_methods[0].id, function (error, data) {
        assert.equal(customer.payment_methods[0].id, data.id);
        done();
      });
    });
  });

  describe('delete()', function() {
    it('should delete a payment method for a customer', function(done){
      tco.payment_methods.create(customer.id, examplePaymentMethod, function (error, data) {
        payment_method = data;

        tco.payment_methods.delete(customer.id, payment_method.id, function (error, data) {
          assert.equal("Payment Method " + payment_method.id + " removed successfully.",data.message);
          assert.equal(null,data.id);
          done();
        });
      });
    });
  });

  describe('default()', function() {
    it('should change default payment method for a customer', function(done){
      var original_payment_method_id = customer.payment_methods[0].id;
      tco.payment_methods.create(customer.id, examplePaymentMethod, function (error, data) {
        payment_method = data;

        tco.payment_methods.default(customer.id, payment_method.id, function (error, data) {

          tco.payment_methods.find(customer.id, payment_method.id, function (error, data) {
            assert.equal(data.default, true);

            tco.payment_methods.find(customer.id, original_payment_method_id, function (error, data) {
              assert.equal(data.default, false);
              done();
            });
          });
        });
      });
    });
  });

});
