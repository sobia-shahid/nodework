var assert = require('assert'),
  tco = require('./spec_helper');


describe('invoices', function(){

  describe('find()', function(){
    var sale;
    before(function(done){
      tco.sales.create(exampleSale, function (error, data) {
        sale = data;
        done();
      });
    });
    it('should return an invoice', function(done){
      tco.invoices.find(sale.invoices[0].id, function (error, data) {
        assert.ok(data.id);
        assert.ok(data.items[0].id);
        assert.equal(data.id, sale.invoices[0].id);
        done();
      });
    });
  });

  describe('list()', function() {
    it('should return a list of invoices', function(done){
      tco.invoices.list(pagenation, function(error, data) {
        assert.ok(data.invoices);
        assert.ok(data.invoices.length > 0);
        done();
      });
    });
  });

  describe('capture()', function(){
    var sale;
    before(function(done){
      tco.sales.create(exampleAuthOnlySale, function (error, data) {
        sale = data;
        done();
      });
    });
    it('should capture an invoice', function(done){
      tco.invoices.capture(sale.invoices[0].id, function (error, data) {
        assert.ok(data.id);
        assert.equal(false,data.needs_captured);
        done();
      });
    });
  });

  describe('refund()', function(){
    var sale;
    before(function(done){
      tco.sales.create(exampleSale, function (error, data) {
        sale = data;
        done();
      });
    });
    it('should refund an invoice', function(done){
      tco.invoices.refund(sale.invoices[0].id, exampleRefund,function (error, data) {
        assert.ok(data.id);
        assert.ok(data.refunds[0].id);
        done();
      });
    });
  });
});
